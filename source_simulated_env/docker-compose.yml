version: '3'
services:
  mongodb:
    image: mongo
    container_name: mongodb
    networks:
      - my_network
    ports:
      - "27017:27017"
    volumes:
      - ./project/script/01-rs-initiate.js:/docker-entrypoint-initdb.d/01-rs-initiate.js
    command: ["--replSet", "dbrs", "--bind_ip_all"]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.getSiblingDB('admin').runCommand({ ping: 1 })"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
  rabbitmq:
    image: rabbitmq
    container_name: rabbitmq
    networks:
      - my_network
    ports:
      - "5672:5672"
      - "15672:15672" 
    environment:
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  python_app:
    build:
      context: .
    env_file:
      - .env
    container_name: python_app
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - my_network
    volumes:
      - ./project:/app/project
      - ./var/celery:/app/var/celery
      - ./log:/app/log
    tty: true
    stdin_open: true
    working_dir: /app/project/resources
    command: ["poetry", "run", "celery", "-A", "tasks", "worker", "--loglevel=info", "--without-heartbeat", "--without-gossip", "--statedb=/app/var/celery/worker.state"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/healthcheck/ || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s

networks:
  my_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.48.0/24
